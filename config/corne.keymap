/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

#define RGB_KEY_COLOR(layer, key, r, g, b) \
    zmk_rgb_set_key_color(layer, key, (r << 16) | (g << 8) | b)


/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB     &kp Q        &kp W            &kp E           &kp R             &kp T        &kp Y    &kp U              &kp I                &kp O              &kp P            &kp BSPC
&kp ESCAPE  &kp A        &kp S            &kp D           &kp F             &kp G        &kp H    &kp J              &kp K                &kp L              &kp SEMI         &kp SQT
&kp DELETE  &mt LCTRL Z  &mt RIGHT_ALT X  &mt LEFT_WIN C  &mt LEFT_SHIFT V  &kp B        &kp N    &mt RIGHT_SHIFT M  &mt RIGHT_WIN COMMA  &mt DOT RIGHT_ALT  &mt RCTRL SLASH  &kp BACKSLASH
                                          &mo 4           &mo 1             &kp SPACE    &kp RET  &mo 2              &kp RIGHT_WIN
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp F1        &kp F2        &kp F3        &kp F4        &kp F5    &kp F6        &kp F7  &kp F8  &kp F9  &kp F10  &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5    &kp NUMBER_6  &kp N7  &kp N8  &kp N9  &kp N0   &kp F11
&trans  &trans        &trans        &trans        &trans        &trans    &trans        &trans  &trans  &trans  &trans   &kp F12
                                    &trans        &trans        &trans    &trans        &trans  &trans
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp PLUS   &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp EQUAL  &kp ASTERISK
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp MINUS  &kp SLASH
                        &trans  &trans  &trans    &trans  &trans           &kp KP_NUMBER_0
            >;
        };

        setting_layer {
            bindings = <
&trans      &trans        &trans        &trans        &trans        &trans          &rgb_ug RGB_COLOR_HSB(0,14,94)  &rgb_ug RGB_COLOR_HSB(0,94,49)  &rgb_ug RGB_COLOR_HSB(154,100,39)  &rgb_ug RGB_COLOR_HSB(64,100,50)  &trans           &trans
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &rgb_ug RGB_OFF                 &rgb_ug RGB_ON                  &rgb_ug RGB_EFF                    &rgb_ug RGB_EFR                   &rgb_ug RGB_SPI  &rgb_ug RGB_SPD
&trans      &trans        &trans        &trans        &trans        &trans          &trans                          &trans                          &trans                             &trans                            &trans           &trans
                                        &trans        &trans        &trans          &trans                          &trans                          &trans
            >;
        };

        code {
            bindings = <
&trans  &trans                &kp LESS_THAN          &kp EQUAL         &kp GREATER_THAN   &trans    &kp PLUS   &trans          &kp LEFT_BRACE  &kp RIGHT_BRACE  &trans     &trans
&trans  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &trans    &kp EQUAL  &kp LEFT_ARROW  &kp DOWN        &kp UP           &kp RIGHT  &kp GRAVE
&trans  &trans                &trans                 &trans            &trans             &trans    &kp MINUS  &trans          &trans          &trans           &trans     &trans
                                                     &trans            &trans             &trans    &trans     &trans          &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        both {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
RGB_KEY_COLOR(0, 0, 255, 0, 0); // Touche 0 de la couche 0 en rouge
// RGB_KEY_COLOR(0, 1, 0, 255, 0); // Touche 1 de la couche 0 en vert
// RGB_KEY_COLOR(1, 0, 0, 0, 255); // Touche 0 de la couche 1 en bleu
};

&led_strip { chain-length = <27>; };

&led_strip {
    chain-length = <27>;
};

